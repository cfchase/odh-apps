apiVersion: v1
kind: Template

metadata:
  name: odh-apps-frontend

parameters:
  - name: APPLICATION_NAME
    value: odh-apps-frontend
    required: true
  - name: ROUTE_NAME
    value: ui
    required: true
  - name: REPLICAS
    value: "2"
    required: true
  - name: IMAGE_REPOSITORY
    displayName: Image Repository
    value: quay.io/cfchase/odh-apps-frontend:latest
    required: true
  - name: CONTAINER_REQUEST_CPU
    value: 500m
  - name: CONTAINER_REQUEST_MEMORY
    value: 500Mi
  - name: CONTAINER_LIMIT_CPU
    value: 500m
  - name: CONTAINER_LIMIT_MEMORY
    value: 1000Mi

objects:
#  - apiVersion: v1
#    kind: DeploymentConfig
#    metadata:
#      labels:
#        app: ${APPLICATION_NAME}
#      name: ${APPLICATION_NAME}
#    spec:
#      replicas: ${{REPLICAS}}
#      revisionHistoryLimit: 2
#      selector:
#        app: ${APPLICATION_NAME}
#      template:
#        metadata:
#          labels:
#            app: ${APPLICATION_NAME}
#        spec:
#          containers:
#            - image: ${IMAGE_REPOSITORY}
#              imagePullPolicy: Always
#              name: ${APPLICATION_NAME}
#              ports:
#                - containerPort: 8080
#                  name: http
#                  protocol: TCP
#              resources:
#                requests:
#                  cpu: ${CONTAINER_REQUEST_CPU}
#                  memory: ${CONTAINER_REQUEST_MEMORY}
#                limits:
#                  cpu: ${CONTAINER_LIMIT_CPU}
#                  memory: ${CONTAINER_LIMIT_MEMORY}
#      triggers:
#        - type: ConfigChange

  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: ${{REPLICAS}}
      selector:
        matchLabels:
          app: ${APPLICATION_NAME}
      template:
        metadata:
          labels:
            app: ${APPLICATION_NAME}
        spec:
          containers:
            - image: ${IMAGE_REPOSITORY}
              imagePullPolicy: Always
              name: ${APPLICATION_NAME}
              ports:
                - containerPort: 8080
                  name: http
                  protocol: TCP


  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
        - name: http
          port: 8080
      selector:
        app: ${APPLICATION_NAME}

  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${ROUTE_NAME}
    spec:
      port:
        targetPort: 8080
      to:
        kind: Service
        name: ${APPLICATION_NAME}
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect